from bs4 import BeautifulSoup
"""
Possible SBCs to choose from:
- ['GLO', 'HUM', 'ARTS', 'SBS', 'ESI', 'USA', 'HFA+', 'SBS+', 'STAS', 'DIV', 'CER', 'SPK', 'WRTD', 'EXP+', 'QPS', 'TECH', 'STEM+', 'SNW', 'LANG', 'WRT']

This data includes all the courses with a period in their description. Some may be ommited if they do not use proper punctuation. 

These courses are available as of Fall 2024, but to update it, download the .htm file generated by searching for "." in Keyword Search here: https://www.stonybrook.edu/sb/bulletin/current/search/ . Make sure to check the By Description box. 

Output is stored in output.md. 
"""


# Alter this list to select all the SBCs you want to sort for
# If you want to sort all courses by # of SBCs met, set this to []
all_desired_SBCs = []


############################################

with open("sbu_courses_html.htm", "r") as f:
    courses_html = f.read()

# Create a BeautifulSoup object
soup = BeautifulSoup(courses_html, 'lxml')


dict_of_dicts_of_SBCs_to_courses = {}
list_of_SBCs = []
list_of_all_courses_and_number_of_sbcs = []
# Find the main div
main_div = soup.find('div', class_='column_2_text')

# Iterate over the sub-divs one layer deep
for sub_div in main_div.find_all('div', recursive=False):
    num_sbcs = 0
    for anchor in sub_div.find_all(lambda tag: tag.name == "a" and tag.parent.name != "p"):
        num_sbcs += 1
        sbc = anchor.text
        if sbc not in list_of_SBCs:
            list_of_SBCs.append(sbc)
            dict_of_dicts_of_SBCs_to_courses[sbc] = []
        else:
            dict_of_dicts_of_SBCs_to_courses[sbc].append(sub_div)
 
    list_of_all_courses_and_number_of_sbcs.append((sub_div, num_sbcs))


def convert_list_to_md(classes, sort_alpha):
    output_str = ""

    
    if sort_alpha:
        sort_fn = lambda tag: tag.text
        classes = sorted(classes, key=sort_fn)

    for x in classes:
        output_str += "### " + x.find('h3').text + "\n"
        
        output_str += x.find('p').text + "\n" + "\n" 
        output_str += "SBCs: " + ", ".join([element.text for element in x.find_all(lambda tag: tag.name == "a" and tag.parent.name != "p")]) + "\n"
    with open("output.md", "w") as f:
        f.write(output_str)



if all_desired_SBCs == []:
    classes = [x[0] for x in sorted(list_of_all_courses_and_number_of_sbcs,key=lambda x: x[1], reverse=True)]
    convert_list_to_md(classes, False)
else:

    relevant_lists = []
    for sbc in all_desired_SBCs:
        relevant_lists.append(dict_of_dicts_of_SBCs_to_courses[sbc])
        
    classes = set.intersection(*map(set,relevant_lists))

    print(f"There are {len(classes)} courses that match {all_desired_SBCs}")
    print(" ")

    convert_list_to_md(classes, True)


